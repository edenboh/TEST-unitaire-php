<?php

namespace App\Tests\Unit;

use App\Entity\Person;
use PHPUnit\Framework\TestCase;
use stdClass;

class PersonUnitTest extends TestCase
{

    private const TEST_VALUES=[
        "firstname"=>"eden",
        "lastname"=>"BOHBOT",
        "age"=>37,
        "birthdate"=>"2003/03/11",
       "tshirts"=>["tshirt blan","tshirt noir"]
    ];
    private function makePerson():Person
    {
        $person=new Person();
        $person->setFirstName(self::TEST_VALUES["firstname"]);
        $person->setLastName(self::TEST_VALUES["lastname"]);
        $person->setAge(self::TEST_VALUES["age"]);
        $person->setBirthDate(date_create_immutable(self::TEST_VALUES["birthdate"]));
        $person->setTshirts(self::TEST_VALUES["tshirts"]);
        return $person;
    }
    public function testGetTshirt()
    {
        $person=$this->makePerson();
        $this->assertEquals(self::TEST_VALUES["tshirts"],$person->getTshirts());

    }
    public function testIdIsAutoGenerated()
    {
        $person=new Person();
        $this->assertNotEmpty($person->getId());
    }
    public function testIdIsInt()
    {
        $person=new Person();
        $this->assertIsInt($person->getId());
    }
    public function testCreatAtIsAutoGenerated()
    {
        $person=new Person();
        $this->assertNotEmpty($person->getCreateAt());
    }
    public function testBirthdateIsImmutable()
    {
        $person=new Person();
        $birthdate=\DateTimeImmutable::createFromFormat('m/d/y','11/03/03');
        $person->setBirthDate($birthdate);
        $this->assertInstanceOf(\DateTimeImmutable::class,$person->getBirthDate());
    }
   public function testCreateAtIsImmutable()
    {
        $person=new Person();
        $this->assertInstanceOf(\DateTimeImmutable::class, $person->getCreateAt());
    }
    public function testGetFirst()
    {
        $person=new Person();
        $person->setFirstName("eden");
        $this->assertEquals("eden",$person->getFirstName());
    }

    public function testsetFisrtWithInvalidedType()//on verifie que ca marche pas avec d'autre type que string, est ce que ca pete comme prevu quand je met autrre chhose que string
    {
        //$this->markTestIncomplete();
        $person=new Person();
        $testValue=[123,[],null,new  StdClass(),'vgy'];//je met un tableau avec des valeur qui ne marche pas vu que nous on recoit que des string
        foreach ($testValue as $value)
        {
            $this->expectException(\TypeError::class);//la on previen oui il y aura une erreu pcq on boucle sur un tableau de type invalide !=string
            $person->setFirstName($value);//c pas bon vu que c pas un string et donc la methode est juste pcq c une erreur pas c pas le bon type
        }
    }
}
